<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Patrick Yu</title>
<generator uri="https://github.com/jekyll/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="/feed.xml" />
<link rel="alternate" type="text/html" href="" />
<updated>2016-04-15T12:20:15-07:00</updated>
<id>/</id>
<author>
  <name>Patrick Yu</name>
  <uri>/</uri>
  <email>patrickyuemail@gmail.com</email>
</author>


  

<entry>
  <title type="html"><![CDATA[Problem 1_8 [CTCI]]]></title>
  <link rel="alternate" type="text/html" href="/ctci/ch1/problem-1_8-ctci/" />
  <id>/ctci/ch1/problem-1_8-ctci</id>
  <published>2015-11-19T23:58:37-08:00</published>
  <updated>2015-11-19T23:58:37-08:00</updated>
  <author>
    <name>Patrick Yu</name>
    <uri></uri>
    <email>patrickyuemail@gmail.com</email>
  </author>
  <content type="html">
    &lt;h3 id=&quot;q&quot;&gt;Q:&lt;/h3&gt;
&lt;p&gt;Assume you have a method isSubstring which checks if one word is a substring of another.  Given two strings, s1 and s2, write code to check if s2 is a rotation of s1 using only one call to isSubstring.&lt;/p&gt;

&lt;h3 id=&quot;a&quot;&gt;A:&lt;/h3&gt;
&lt;p&gt;I think this problem is really cool.&lt;/p&gt;

&lt;p&gt;What you do is use one of the strings and create a string that is that string twice.  For example, if your two strings are “racecar” and “ecarrac”, you take the first string and create a new string, “racecarracecar”.  Then you run isSubstring(“racecarracecar”,”ecarrac”).&lt;/p&gt;

&lt;p&gt;Super cool solution.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/patricknyu/CtCInterview/tree/master/ch_1/1_8&quot;&gt;Java for Problem 1.8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/patricknyu/CtCInterview/tree/master/ch_1/Python/1_8&quot;&gt;rotation.py&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;```Python
import fileinput
import re&lt;/p&gt;

&lt;p&gt;def rotation(s1,s2):
	if(len(s1)!=len(s2) or len(s1)==0):
		return False
	return True if (s2 in s1+s1) else False&lt;/p&gt;

&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == “&lt;strong&gt;main&lt;/strong&gt;”:
	for line in fileinput.input():
		s = re.split(‘\s+’, line)
		print(s[0])
		print(s[1])
		print(rotation(s[0],s[1]))
```&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/ctci/ch1/problem-1_8-ctci/&quot;&gt;Problem 1_8 [CTCI]&lt;/a&gt; was originally published by Patrick Yu at &lt;a href=&quot;&quot;&gt;Patrick Yu&lt;/a&gt; on November 19, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Problem 1_7 [CTCI]]]></title>
  <link rel="alternate" type="text/html" href="/ctci/ch1/problem-1_7-ctci/" />
  <id>/ctci/ch1/problem-1_7-ctci</id>
  <published>2015-11-19T23:54:41-08:00</published>
  <updated>2015-11-19T23:54:41-08:00</updated>
  <author>
    <name>Patrick Yu</name>
    <uri></uri>
    <email>patrickyuemail@gmail.com</email>
  </author>
  <content type="html">
    &lt;h3 id=&quot;q&quot;&gt;Q:&lt;/h3&gt;
&lt;p&gt;Write an algorithm such that if an element in an MxN matrix is 0, its entire row and column are set to 0.&lt;/p&gt;

&lt;h3 id=&quot;a&quot;&gt;A:&lt;/h3&gt;
&lt;p&gt;This problem isn’t to interesting to me personally.&lt;/p&gt;

&lt;p&gt;You create an boolean array for rows sized at M and an boolean array for columns sized N.  You iterate through the matrix.  If you encounter a 0, you set the respective values in the boolean arrays to true.&lt;/p&gt;

&lt;p&gt;Then you iterate through each array.  At every truth, call a helper method to set 0s.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/patricknyu/CtCInterview/tree/master/ch_1/1_7&quot;&gt;Java for Problem 1.7&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/patricknyu/CtCInterview/tree/master/ch_1/Python/1_7&quot;&gt;setZeros.py&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;```python
def setCol(matrix,col):
	numRows = len(matrix)
	numCols = len(matrix[0])
	for i in range(0,numRows):
		matrix[col][i] = 0
	return matrix
def setRows(matrix,row):
	numRows = len(matrix)
	numCols = len(matrix[0])
	for i in range(0,numCols):
		matrix[i][row] = 0
	return matrix
def setZeros(matrix):
	RowZeros = [False for i in range(0,len(matrix))]
	ColZeros = [False for i in range(0,len(matrix[0]))]
	for i in range(0,len(matrix)):
		for j in range(0,len(matrix[0])):
			if(matrix[i][j] == 0):
				RowZeros[i] = True
				ColZeros[i] = True
	for i in range(0,len(RowZeros)):
		if(RowZeros[i]):
			matrix = setCol(matrix,i)
	for i in range(0,len(ColZeros)):
		if(ColZeros[i]):
			matrix = setRows(matrix,i)
	return matrix&lt;/p&gt;

&lt;p&gt;a = [[1,2,3],[4,0,6],[7,8,9]]
print(setZeros(a))
```&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/ctci/ch1/problem-1_7-ctci/&quot;&gt;Problem 1_7 [CTCI]&lt;/a&gt; was originally published by Patrick Yu at &lt;a href=&quot;&quot;&gt;Patrick Yu&lt;/a&gt; on November 19, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Problem 1_6 [CTCI]]]></title>
  <link rel="alternate" type="text/html" href="/ctci/ch1/problem-1_6-ctci/" />
  <id>/ctci/ch1/problem-1_6-ctci</id>
  <published>2015-11-19T23:50:15-08:00</published>
  <updated>2015-11-19T23:50:15-08:00</updated>
  <author>
    <name>Patrick Yu</name>
    <uri></uri>
    <email>patrickyuemail@gmail.com</email>
  </author>
  <content type="html">
    &lt;h3 id=&quot;q&quot;&gt;Q:&lt;/h3&gt;

&lt;p&gt;Given an image represented by an NxN matrix, where each pixel in the image is 4 bytes, write a method to rotate the image by 90 degrees.  Can you do this in place?&lt;/p&gt;

&lt;h3 id=&quot;a&quot;&gt;A:&lt;/h3&gt;

&lt;p&gt;This is actually a cool problem.  It requires you to keep track of a lot of things at once when creating your algorithm.&lt;/p&gt;

&lt;p&gt;Essentially you want to go layer by layer through the matrix.  You iterate starting at layer 0 to layer n/2.  Then you have another loop where you take part of each layer you are at and rotate them. Storing one section at a time.  It’s easiest to understand if you read through the code.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/patricknyu/CtCInterview/tree/master/ch_1/1_6&quot;&gt;Java for Problem 1.6&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/patricknyu/CtCInterview/tree/master/ch_1/Python/1_6&quot;&gt;rotate.py&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;```python
def rotate(matrix):
	for layer in range(0,len(matrix)/2):
		first = layer
		last = len(matrix)-1-layer
		for i in range(first,last):
			offset = i - first
			top = matrix[first][i]
			matrix[first][i] = matrix[last-offset][first]
			matrix[last-offset][first] = matrix[last][last-offset]
			matrix[last][last-offset] = matrix[i][last]
			matrix[i][last] = top
	return matrix&lt;/p&gt;

&lt;p&gt;a = [[1,2,3],[4,5,6],[7,8,9]]
print(rotate(a))
```&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/ctci/ch1/problem-1_6-ctci/&quot;&gt;Problem 1_6 [CTCI]&lt;/a&gt; was originally published by Patrick Yu at &lt;a href=&quot;&quot;&gt;Patrick Yu&lt;/a&gt; on November 19, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Problem 1_5 [CTCI]]]></title>
  <link rel="alternate" type="text/html" href="/ctci/ch1/problem-1_5-ctci/" />
  <id>/ctci/ch1/problem-1_5-ctci</id>
  <published>2015-11-19T23:43:29-08:00</published>
  <updated>2015-11-19T23:43:29-08:00</updated>
  <author>
    <name>Patrick Yu</name>
    <uri></uri>
    <email>patrickyuemail@gmail.com</email>
  </author>
  <content type="html">
    &lt;h3 id=&quot;q&quot;&gt;Q:&lt;/h3&gt;

&lt;p&gt;Implement a method to perform basic string compression using the counts of repeated characters.  For example, the string aabcccccaaa would become a2b1c5a3.  If the “compressed” string would not become smaller than the original string, your method should return the original string.  You can assume the string has only upper and lower case letters (a-z).&lt;/p&gt;

&lt;h3 id=&quot;a&quot;&gt;A:&lt;/h3&gt;

&lt;p&gt;This is an easy question if you use a StringBuilder/StringBuffer in Java.  It’s just as easy in Python using a list.&lt;/p&gt;

&lt;p&gt;First, write a method to check what the compressed length would be.  If not shorter, don’t run your compression.&lt;/p&gt;

&lt;p&gt;As far as the compression - you can iterate through a character array while carrying a count and last character.  Each time your current character is equal to the last character. You add 1 to count.  If they are not equal add the last character and the last character’s count to your Python list/StringBuilder.  Then set last character to current one and set count to 1.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/patricknyu/CtCInterview/tree/master/ch_1/1_5&quot;&gt;Java for Problem 1.5&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/patricknyu/CtCInterview/tree/master/ch_1/Python/1_5&quot;&gt;compressString.py&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;```python
import fileinput
def checkCompression(charArr):
	original = len(charArr)-1
	new = 0
	currentChar = ‘’
	for i in charArr:
		if(i == ‘\n’):
			continue
		if(currentChar == ‘’):
			currentChar = i
			new = 2
		if(i != currentChar):
			currentChar = i
			new+=2
	return new
def compress(s):
	charArr = list(s)
	if(checkCompression(charArr)&amp;gt;= len(charArr)-1):
		return s
	currentChar = ‘’
	currentCount = 0
	answer = []
	for i in charArr:
		if(i == ‘\n’):
			answer.append(currentChar)
			answer.append(currentCount)
		if(currentChar == ‘’ and currentCount == 0):
			currentChar = i
			currentCount = 1
		if(currentChar ==i):
			currentCount+=1
		elif(i !=currentChar):
			answer.append(currentChar)
			answer.append(currentCount)
			currentChar = i
			currentCount = 1
	if(len(answer) &amp;lt; len(charArr)-1):
		return ‘‘.join(str(i) for i in answer)
	return s&lt;/p&gt;

&lt;h1 id=&quot;this-is-a-bit-slow-since-we-dont-check-for-it-being-short-till-the-end&quot;&gt;This is a bit slow since we don’t check for it being short till the end.&lt;/h1&gt;
&lt;p&gt;# if this was Java we should be using a StringBuilder&lt;/p&gt;

&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == “&lt;strong&gt;main&lt;/strong&gt;”:
	for line in fileinput.input():
		print(line)
		print(compress(line))
```&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/ctci/ch1/problem-1_5-ctci/&quot;&gt;Problem 1_5 [CTCI]&lt;/a&gt; was originally published by Patrick Yu at &lt;a href=&quot;&quot;&gt;Patrick Yu&lt;/a&gt; on November 19, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Problem 1_4 [CTCI]]]></title>
  <link rel="alternate" type="text/html" href="/ctci/ch1/problem-1_4-ctci/" />
  <id>/ctci/ch1/problem-1_4-ctci</id>
  <published>2015-11-19T23:29:07-08:00</published>
  <updated>2015-11-19T23:29:07-08:00</updated>
  <author>
    <name>Patrick Yu</name>
    <uri></uri>
    <email>patrickyuemail@gmail.com</email>
  </author>
  <content type="html">
    &lt;h3 id=&quot;q&quot;&gt;Q:&lt;/h3&gt;
&lt;p&gt;Write a method to replace all spaces in a string with ‘%20’.  You many assume that the string has sufficient space at the end of the sting to hold the additional characters, and that you are given the “true” length of the string.&lt;/p&gt;

&lt;h3 id=&quot;a&quot;&gt;A:&lt;/h3&gt;
&lt;p&gt;This was my first approach.&lt;/p&gt;

&lt;p&gt;First I split up my string to a character array.  I added each character to a StringBuilder.  Every time I encountered a space, I inserted a ‘%20’.&lt;/p&gt;

&lt;p&gt;When I was using Python, I was able to just put my strings into a list and then join the list.&lt;/p&gt;

&lt;p&gt;I also created a more standard implementation where I counted the spaces, created an empty array of the original length plus space length multiplied by 3.  Then I iterated through my character array and inserted ‘%20’ when I encountered spaces.&lt;/p&gt;

&lt;p&gt;Neither of these solutions are in place.  My java solution was in place.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/patricknyu/CtCInterview/tree/master/ch_1/1_4&quot;&gt;Java for Problem 1.4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/patricknyu/CtCInterview/tree/master/ch_1/Python/1_4&quot;&gt;replaceSpace.py&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;```python
import fileinput
def replaceSpace(s):
	charArr = list(s)
	charArrAns = []
	for i in charArr:
		if(ord(i)==32):
			charArrAns.append(‘%20’)
		elif(i != ‘\n’):
			charArrAns.append(i)
	return ‘‘.join(charArrAns)&lt;/p&gt;

&lt;h1 id=&quot;python-makes-this-a-bit-too-easy--ill-try-to-rewrite-it-so-its-more-java-like&quot;&gt;Python makes this a bit too easy.  I’ll try to rewrite it so it’s more java like&lt;/h1&gt;

&lt;p&gt;def replaceSpace2(s,length):
	charArr = list(s)
	emptySpaces = 0
	for i in charArr:
		if(ord(i)==32):
			emptySpaces+=1
	answerArr = [’’ for i in range(0,length+emptySpaces*3)]
	j =0
	for i in charArr:
		if(ord(i)==32):
			answerArr[j] = ‘%’
			answerArr[j+1] = ‘2’
			answerArr[j+2] = ‘0’
			j+=3
		elif(i !=’\n’):
			answerArr[j] = i
			j+=1
	return ‘‘.join(answerArr)
if &lt;strong&gt;name&lt;/strong&gt; == “&lt;strong&gt;main&lt;/strong&gt;”:
	for line in fileinput.input():
		print(line)
		print(replaceSpace(line))
		print(replaceSpace2(line,len(str(line))-1))
```&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/ctci/ch1/problem-1_4-ctci/&quot;&gt;Problem 1_4 [CTCI]&lt;/a&gt; was originally published by Patrick Yu at &lt;a href=&quot;&quot;&gt;Patrick Yu&lt;/a&gt; on November 19, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Problem 1_3 [CTCI]]]></title>
  <link rel="alternate" type="text/html" href="/ctci/ch1/problem-1_3-ctci/" />
  <id>/ctci/ch1/problem-1_3-ctci</id>
  <published>2015-11-19T23:25:33-08:00</published>
  <updated>2015-11-19T23:25:33-08:00</updated>
  <author>
    <name>Patrick Yu</name>
    <uri></uri>
    <email>patrickyuemail@gmail.com</email>
  </author>
  <content type="html">
    &lt;h3 id=&quot;q&quot;&gt;Q:&lt;/h3&gt;
&lt;p&gt;Given two strings, write a method to decide if one is a permuation of the other.&lt;/p&gt;

&lt;h3 id=&quot;a&quot;&gt;A:&lt;/h3&gt;
&lt;p&gt;Essentially I chose to count the count of each character (assuming that we only were given alphabet lower case characters) and compare.&lt;/p&gt;

&lt;p&gt;The runtime should be at O(n).&lt;/p&gt;

&lt;p&gt;Here’s the Java solution.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/patricknyu/CtCInterview/tree/master/ch_1/1_3&quot;&gt;Java for Problem 1.3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here’s the Python one.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/patricknyu/CtCInterview/tree/master/ch_1/Python/1_3&quot;&gt;Permutation.py&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;```python
import fileinput
import re&lt;/p&gt;

&lt;p&gt;def permutation(s1,s2):
	if(len(s1)!=len(s2)):
		return False
	s1charArr = list(s1)
	s2charArr = list(s2)
	s1charCount = [0 for i in range(0,26)]
	s2charCount = [0 for i in range(0,26)]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for i in range(0,len(s1)):
	if(s1[i] != &#39;\n&#39;):
		s1charCount[ord(s1[i])-97]+=1
	if(s2[i] != &#39;\n&#39;):
		s2charCount[ord(s2[i])-97]+=1
for i in range(0,26):
	if(s1charCount[i] !=s2charCount[i]):
		return False
return True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == “&lt;strong&gt;main&lt;/strong&gt;”:
	for line in fileinput.input():
		s = re.split(‘\s+’, line)
		print(s[0])
		print(s[1])
		print(permutation(s[0],s[1]))
```&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/ctci/ch1/problem-1_3-ctci/&quot;&gt;Problem 1_3 [CTCI]&lt;/a&gt; was originally published by Patrick Yu at &lt;a href=&quot;&quot;&gt;Patrick Yu&lt;/a&gt; on November 19, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Problem 1_1 [CTCI]]]></title>
  <link rel="alternate" type="text/html" href="/ctci/ch1/problem-1_1-ctci/" />
  <id>/ctci/ch1/problem-1_1-ctci</id>
  <published>2015-11-18T22:24:27-08:00</published>
  <updated>2015-11-18T22:24:27-08:00</updated>
  <author>
    <name>Patrick Yu</name>
    <uri></uri>
    <email>patrickyuemail@gmail.com</email>
  </author>
  <content type="html">
    &lt;h3 id=&quot;q&quot;&gt;Q&lt;/h3&gt;
&lt;p&gt;Implement an algoirthm to determine if a string has all unique characters.  What if you cannot use additional data structures?&lt;/p&gt;

&lt;h3 id=&quot;a&quot;&gt;A&lt;/h3&gt;

&lt;p&gt;Here’s the Java solution.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/patricknyu/CtCInterview/tree/master/ch_1/1_1&quot;&gt;Java for Problem 1.1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here’s the Python one.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/patricknyu/CtCInterview/tree/master/ch_1/Python/1_1&quot;&gt;Python for Problem 1.1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;```python
import fileinput&lt;/p&gt;

&lt;p&gt;def unique(s):
	charArr = list(s)
	charIdx = [0]*26
	#print(charArr)
	for i in charArr:
		if(i==’\n’):
			continue
		if(charIdx[ord(i)-97] == 1):
			return False
		else:
			charIdx[ord(i)-97]+=1
	return True&lt;/p&gt;

&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == “&lt;strong&gt;main&lt;/strong&gt;”:
	for line in fileinput.input():
		print(line)
		print(unique(str(line)))
```&lt;/p&gt;

&lt;p&gt;I’m not going to do 1.2 since it is a C++ problem.  My C++ is nowhere near strong enough to do difficult problems.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/ctci/ch1/problem-1_1-ctci/&quot;&gt;Problem 1_1 [CTCI]&lt;/a&gt; was originally published by Patrick Yu at &lt;a href=&quot;&quot;&gt;Patrick Yu&lt;/a&gt; on November 18, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Chapter 1 [CTCI]]]></title>
  <link rel="alternate" type="text/html" href="/ctci/ch1/chapter-1-ctci/" />
  <id>/ctci/ch1/chapter-1-ctci</id>
  <published>2015-11-18T22:22:00-08:00</published>
  <updated>2015-11-18T22:22:00-08:00</updated>
  <author>
    <name>Patrick Yu</name>
    <uri></uri>
    <email>patrickyuemail@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;I’m starting from the beginning.  I’ve done most of these problems and for the most part, they aren’t too dificult.  I’m rewriting them in Python which feels like cheating sometimes.&lt;/p&gt;

&lt;h1 id=&quot;chapter-1&quot;&gt;Chapter 1&lt;/h1&gt;

&lt;h2 id=&quot;arrays-and-strings&quot;&gt;Arrays and Strings&lt;/h2&gt;

&lt;h3 id=&quot;hashtables&quot;&gt;HashTables&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Contains an underlying array and a hash function.&lt;/li&gt;
  &lt;li&gt;Underlying data structure can also be a binary search tree.&lt;/li&gt;
  &lt;li&gt;In this case look up time is O(log(n)) due to balancing.&lt;/li&gt;
  &lt;li&gt;Otherwise, insert, search, delete are all O(1) in the average case and O(n) in the worst&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;arraylist&quot;&gt;ArrayList&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Array without a set length.&lt;/li&gt;
  &lt;li&gt;Each time we run out of space, the array doubles.&lt;/li&gt;
  &lt;li&gt;Double takes O(n) time but it rarely happens, so it is still O(1).&lt;/li&gt;
  &lt;li&gt;Lookup is O(1)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;stringbuffer&quot;&gt;StringBuffer&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;This is so useful.  It’s an efficient way to concatenating strings.&lt;/li&gt;
  &lt;li&gt;Pretty much puts the string in an array.&lt;/li&gt;
&lt;/ul&gt;

    &lt;p&gt;&lt;a href=&quot;/ctci/ch1/chapter-1-ctci/&quot;&gt;Chapter 1 [CTCI]&lt;/a&gt; was originally published by Patrick Yu at &lt;a href=&quot;&quot;&gt;Patrick Yu&lt;/a&gt; on November 18, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Getting Back Into It]]></title>
  <link rel="alternate" type="text/html" href="/posts/getting-back-into-it/" />
  <id>/posts/getting-back-into-it</id>
  <published>2015-11-13T01:01:50-08:00</published>
  <updated>2015-11-13T01:01:50-08:00</updated>
  <author>
    <name>Patrick Yu</name>
    <uri></uri>
    <email>patrickyuemail@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;I’ve been really bad about posting lately.  I had a big interview and got caught up in studying for it.  I need to get back into writing here for accountibility’s sake. I think I’m going to start over and start posting from ch1 of CTCI.  I don’t know how much Accelerated C++ I’ll be doing.  We shall see.&lt;/p&gt;

&lt;p&gt;Because I’ve been listening to some weird stuff lately.&lt;/p&gt;

&lt;p&gt;Here is Yung Lean - Hooover&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/9jDiAcqbO0c&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

    &lt;p&gt;&lt;a href=&quot;/posts/getting-back-into-it/&quot;&gt;Getting Back Into It&lt;/a&gt; was originally published by Patrick Yu at &lt;a href=&quot;&quot;&gt;Patrick Yu&lt;/a&gt; on November 13, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Chapter 9 Intro[CTCI]]]></title>
  <link rel="alternate" type="text/html" href="/ctci/ch9/chapter-9-intro-ctci/" />
  <id>/ctci/ch9/chapter-9-intro-ctci</id>
  <published>2015-10-16T16:29:32-07:00</published>
  <updated>2015-10-16T16:29:32-07:00</updated>
  <author>
    <name>Patrick Yu</name>
    <uri></uri>
    <email>patrickyuemail@gmail.com</email>
  </author>
  <content type="html">
    &lt;h2 id=&quot;recursion-and-dynamic-programming&quot;&gt;Recursion and Dynamic Programming&lt;/h2&gt;

&lt;h4 id=&quot;approach&quot;&gt;Approach&lt;/h4&gt;

&lt;p&gt;When trying to solve f(n), we have to look at f(n-1) first.&lt;/p&gt;

&lt;p&gt;There are two types of recursive approaches that are pretty basing.&lt;/p&gt;

&lt;p&gt;The first is bottom up recursion, which is the one we normally think about.  You start with solving the simple case and then work your way up to the full solution.&lt;/p&gt;

&lt;p&gt;The second is top down recursion, which is a bit more complicated.  You need to divide the full case to sub problems.&lt;/p&gt;

&lt;p&gt;Dynamic programming is a powerful way to solve problems.  There was a time when I was very good at it.&lt;/p&gt;

&lt;p&gt;The example of dynamic programming provided by the book is the Fibonnaci sequence.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;java
public int fib(int i)
{
	if(i==0)
	{
		return 0;
	}
	if(i==1)
	{
		return 1;
	}
	return fib(i-1) + fib(i-2);
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A big difficulty with dynamic programming is runtime analysis.&lt;/p&gt;

&lt;p&gt;For example, see that for this Fibonnaci sequence has a very bad time complexity of O(2&lt;sup&gt;n&lt;/sup&gt;).&lt;/p&gt;

&lt;p&gt;Here is an easy way to speed it up.&lt;/p&gt;

&lt;p&gt;```java
int[] fib = new int[max];&lt;/p&gt;

&lt;p&gt;int fibonnaci(int i)
{
  if (i == 0)
  {
    return 0;
  }
  if(i==1)
  {
    return 1;
  }
  if(fib[i]!=0)
  {
    return fib[i];
  }
  fib[i] = fibonnaci(i-1)+fibonnaci(i-2);
  return fib[i];
}
```&lt;/p&gt;

&lt;p&gt;This allows us to cache the results and get O(n) time.&lt;/p&gt;

&lt;h3 id=&quot;recursive-vs-iterative&quot;&gt;Recursive vs Iterative&lt;/h3&gt;

&lt;p&gt;Recursion is slow.  Remember that.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/ctci/ch9/chapter-9-intro-ctci/&quot;&gt;Chapter 9 Intro[CTCI]&lt;/a&gt; was originally published by Patrick Yu at &lt;a href=&quot;&quot;&gt;Patrick Yu&lt;/a&gt; on October 16, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Problem 8_10[CTCI]]]></title>
  <link rel="alternate" type="text/html" href="/ctci/ch8/problem-8_10-ctci/" />
  <id>/ctci/ch8/problem-8_10-ctci</id>
  <published>2015-10-16T16:06:18-07:00</published>
  <updated>2015-10-16T16:06:18-07:00</updated>
  <author>
    <name>Patrick Yu</name>
    <uri></uri>
    <email>patrickyuemail@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;&lt;a href=&quot;https://github.com/patricknyu/CtCInterview/tree/master/ch_8/8_9&quot;&gt;Github Source&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;q&quot;&gt;Q:&lt;/h3&gt;
&lt;p&gt;Design and implement a hash table which uses chaining (linked lists) to handle collisions.&lt;/p&gt;

&lt;h3 id=&quot;a&quot;&gt;A:&lt;/h3&gt;

&lt;p&gt;We need to realize that we will have an issue when we we have a bunch of collisions, we actually can’t differentiate between them once we put them on our hash.&lt;/p&gt;

&lt;p&gt;We need to create some sort of class that will allow us to differentiate.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/patricknyu/CtCInterview/blob/master/ch_8/8_10/Cell.java&quot;&gt;Cell.java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;```java
public class Cell&amp;lt;K,V&amp;gt;
{
	private K key;
	private V value;
	public Cell(K k, V v)
	{
		key = k;
		value = v;
	}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public boolean equivalent(Cell&amp;lt;K,V&amp;gt; c)
{
	return equivalent(c.getKey());
}
public boolean equivalent(K k)
{
	return key.equals(k);
}
public K getKey()
{
	return key;
}
public V getValue()
{
	return value;
} } ```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/patricknyu/CtCInterview/blob/master/ch_8/8_10/Hash.java&quot;&gt;Hash.java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;```java
import java.util.LinkedList;&lt;/p&gt;

&lt;p&gt;public class Hash&amp;lt;K,V&amp;gt;
{
	private final int MAX_SIZE = 10;
	//array of items
	LinkedList&amp;lt;Cell&amp;lt;K,V»[] items;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public Hash()
{
	items = (LinkedList&amp;lt;Cell&amp;lt;K,V&amp;gt;&amp;gt;[]) new LinkedList[MAX_SIZE];
}

//Lame hash
public int hashCodeOfKey(K key)
{
	return key.toString().length() % items.length;
}

public void put(K key, V value)
{
	int x = hashCodeOfKey(key);
	if (items[x] == null)
	{
		items[x] = new LinkedList&amp;lt;Cell&amp;lt;K,V&amp;gt;&amp;gt;();
	}

	LinkedList&amp;lt;Cell&amp;lt;K,V&amp;gt;&amp;gt; collided = items[x];

	for(Cell&amp;lt;K,V&amp;gt; c: collided)
	{
		if(c.equivalent(key))
		{
			collided.remove(c);
			break;
		}
	}
	Cell&amp;lt;K,V&amp;gt; cell = new Cell&amp;lt;K,V&amp;gt;(key,value);
}

public V get(K key)
{
	int x = hashCodeOfKey(key);
	if(items[x] == null)
	{
		return null;
	}
	LinkedList&amp;lt;Cell&amp;lt;K,V&amp;gt;&amp;gt; collided = items[x];
	for(Cell&amp;lt;K,V&amp;gt; c: collided)
	{
		if(c.equivalent(key))
		{
			return c.getValue();
		}
	}
	return null;
} } ```
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;&lt;a href=&quot;/ctci/ch8/problem-8_10-ctci/&quot;&gt;Problem 8_10[CTCI]&lt;/a&gt; was originally published by Patrick Yu at &lt;a href=&quot;&quot;&gt;Patrick Yu&lt;/a&gt; on October 16, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Problem 8_9[CTCI]]]></title>
  <link rel="alternate" type="text/html" href="/ctci/ch8/problem-8_9-ctci/" />
  <id>/ctci/ch8/problem-8_9-ctci</id>
  <published>2015-10-16T16:03:59-07:00</published>
  <updated>2015-10-16T16:03:59-07:00</updated>
  <author>
    <name>Patrick Yu</name>
    <uri></uri>
    <email>patrickyuemail@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;&lt;a href=&quot;https://github.com/patricknyu/CtCInterview/tree/master/ch_8/8_9&quot;&gt;Github Source&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;q&quot;&gt;Q:&lt;/h3&gt;
&lt;p&gt;Explain the data structures and algorithms that you would use to design an in-memory file system. Illustrate with an example in code where possible.&lt;/p&gt;

&lt;h3 id=&quot;a&quot;&gt;A:&lt;/h3&gt;
&lt;p&gt;Basically, we need a file class and a directory class where one directory class can contain other directory classes.&lt;/p&gt;

&lt;p&gt;The given solution uses a class called Entry which we inherit properties from.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/patricknyu/CtCInterview/blob/master/ch_8/8_9/Directory.java&quot;&gt;Directory.java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;```java
import java.util.ArrayList;
public class Directory extends Entry
{
	protected ArrayList&lt;entry&gt; contents;&lt;/entry&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public Directory(String n, Directory p)
{
	super(n,p);
	contents = new ArrayList&amp;lt;Entry&amp;gt;();
}

public int size()
{
	//Must do this since directories can contain directories.
	int size = 0;
	for (Entry e: contents)
	{
		size +=e.size();
	}
	return size;
}
public int numberOfFiles()
{
	int count = 0;
	for (Entry e : contents)
	{
		if (e instanceof Directory)
		{
			count++;
			Directory d = (Directory) e;
			count+=d.numberOfFiles();
		}
		else if(e instanceof File)
		{
			count++;
		}
	}
	return count;
}
public boolean deleteEntry(Entry e)
{
	return contents.remove(e);
}
public void addEntry(Entry e)
{
	contents.add(e);
}
protected ArrayList&amp;lt;Entry&amp;gt; getContents()
{
	return contents;
} } ```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/patricknyu/CtCInterview/blob/master/ch_8/8_9/Entry.java&quot;&gt;Entry.java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;```java
public abstract class Entry
{
	protected Directory parent;
	protected long created;
	protected long lastUpdated;
	protected long lastAccessed;
	protected String name;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public Entry(String n, Directory p)
{
	name = n;
	parent = p;
	created = System.currentTimeMillis();
	lastUpdated = System.currentTimeMillis();
	lastAccessed = System.currentTimeMillis();
}

public boolean delete()
{
	if(parent == null)
	{
		return false;
	}
	return parent.deleteEntry(this);
}
public abstract int size();
public String getFullPath()
{
	if(parent == null)
	{
		return name;
	}
	return parent.getFullPath() + &quot;/&quot; + name;
}

public long getCreationTime()
{
	return created;
}
public long getLastUpdatedTime()
{
	return lastUpdated;
}
public long getLastAccessedTime()
{
	return lastAccessed;
}
public void changeName(String n)
{
	name = n;
}
public String getName()
{
	return name;
} } ```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/patricknyu/CtCInterview/blob/master/ch_8/8_8/File.java&quot;&gt;File.java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;```java
public class File extends Entry
{
	private String content;
	private int size;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public File(String n,Directory p, int s)
{
	super(n,p);
	size = s;
}

public int size()
{
	return size;
}
public String getContent()
{
	return content;
}
public void setContents(String c)
{
	content = c;
} } ```
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;&lt;a href=&quot;/ctci/ch8/problem-8_9-ctci/&quot;&gt;Problem 8_9[CTCI]&lt;/a&gt; was originally published by Patrick Yu at &lt;a href=&quot;&quot;&gt;Patrick Yu&lt;/a&gt; on October 16, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Problem 8_8[CTCI]]]></title>
  <link rel="alternate" type="text/html" href="/ctci/ch8/problem-8_8-ctci/" />
  <id>/ctci/ch8/problem-8_8-ctci</id>
  <published>2015-10-16T15:58:24-07:00</published>
  <updated>2015-10-16T15:58:24-07:00</updated>
  <author>
    <name>Patrick Yu</name>
    <uri></uri>
    <email>patrickyuemail@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;&lt;a href=&quot;https://github.com/patricknyu/CtCInterview/tree/master/ch_8/8_8&quot;&gt;Github Source&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;q&quot;&gt;Q:&lt;/h3&gt;
&lt;p&gt;Othello is played as follows: Each Othello piece is white on one side and black on the other. When a piece is surrounded by its opponents on both the left and right sides, or both the top and bottom, it is said to be captured and its color is flipped. On your turn, you must capture at least one of your opponent’s pieces. The game ends when either user has no more valid moves. The win is assigned to the person with the most pieces. Implement the object-oriented design for Othello.&lt;/p&gt;

&lt;h3 id=&quot;a&quot;&gt;A:&lt;/h3&gt;
&lt;p&gt;Well initially, this makes me think about the objects we will need.  We need some sort of board object.  I probably want to store that as a 2d array just for simplicity.  We will also need a piece object which has an attribute which allows for white and black pieces.  Players will probably also be necessary.&lt;/p&gt;

&lt;p&gt;Some thoughts taken from the solutions:
- You might think to make a Piece object and then BlackPiece and WhitePiece which will inherit properties from Piece, but this is inadvisable since we will flip colors frequently.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;You may want to split up Game and Board, or you can keep it together.  I would keep it separate.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Keeping score has different options.  I would probably do it in Board.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It would help if Game was singleton class.  However, this is an assumption.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/patricknyu/CtCInterview/blob/master/ch_8/8_8/Board.java&quot;&gt;Board.java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;```java
public class Board
{
	private int blackCount = 0;
	private int whiteCount = 0;
	//2d array to represent the pieces
	private Piece[][] board;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public Board(int rows, int columns)
{
	board = new Piece[rows][columns];
}

public void initialize()
{
	int middleR = board.length/2;
	int middleC = board[middleR].length/2;
	board[middleR][middleC] = new Piece(Color.White);
	board[middleRow+1][middleC] = new Piece(Color.Black);
	board[middleRow+1][middleC+1] = new Piece(Color.White);
	board[middleRow][middleC+1] = new Piece(Color.White);
	blackCount = 2;
	whiteCount = 2;
}

public boolean placeColor(int row, int column, Color c)
{
	if (board[row][column] != null)
	{
		return false;
	}
	else
	{
		//For directions to flip
		int[] results = new int[4];
		results[0] = flipSection(row-1,column,color,Direction.up);
		results[1] = flipSection(row+1,column,color,Direction.down);
		results[2] = flipSection(row,column+1,color,Direction.right);
		results[3] = flipSection(row,column-1,color,Direction.left);
		
		int flipped = 0;
		for (int i = 0; i&amp;lt; 4;i++)
		{
			if (results[i] &amp;gt; 0)
			{
				flipped +=results[i];
			}
		}

		if(flipped &amp;lt;=0)
		{
			return false;
		}

		piece[row][column] = new Piece(c);
		updateScore(c, flipped+1);
	}
		return true;
}
public int flipSection(int row, int column, Color color, Direction d)
{
	int r=0;
	int c=0;
	switch(d)
	{
	case up:
		r = -1;
		break;
	case down:
		r = 1;
		break;
	case left:
		c = -1;
		break;
	case right:
		c = 1;
		break;
	}
	if(row &amp;lt; 0|| column &amp;lt; 0 || row &amp;gt; board.length|| column &amp;gt; board[row].length || board[row][column] == null)
	{
		return -1;
	}

	if(board[row][column].getColor() == color)
	{
		return 0;
	}
	int flipped = flipSection(row+r,colum + c, color, d)
	if(flipped &amp;lt;0)
	{
		return -1;
	}
	board[row][column].flip();
	return flipped +1;
}
public int getScoreForColor(Color c)
{
	if(c == Color.Black)
	{
		return blackCount;
	}
	return whiteCount;
}
public void updateScore(Color c, int news)
{
	if(c == Color.Black)
	{
		whiteCount -= (news-1);
		blackCount += news;
	}
	else
	{
		whitecount +=news;
		blackCount -=(news-1);
	}
}
public void printBoard()
{
	for(int row =0; row&amp;lt; board.length;row++)
	{
		for (int column = 0; column &amp;lt; board[row].length;i++)
		{
			if(board[row][column] == null)
			{
				System.out.print(&quot;_&quot;);
			}
			else if(board[row][column] == Color.Black)
			{
				System.out.print(&quot;B&quot;);
			}
			else if (board[row][column] == Color.White)
			{
				System.out.print(&quot;W&quot;);
			}
		}
		System.out.println();
	}
} } ```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/patricknyu/CtCInterview/blob/master/ch_8/8_8/Color.java&quot;&gt;Color.java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;java
public enum Color
{
	White, Black;
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/patricknyu/CtCInterview/blob/master/ch_8/8_8/Game.java&quot;&gt;Game.java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;```java
public class Game
{
	//This will be sized at 2
	private Player[] players;
	private static Game _instance;
	private Board board;
	//We create this as a singleton.  Also we assume 10x10
	private final int ROWS = 10;
	private final int COLUMNS = 10;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private Game()
{
	board = new Board(ROWS,COLUMNS);
	players = new Player[2];
	players[0] = new Player(Color.Black);
	players[1] = new Player(Color.White);
}
//Standard singleton stuff.
public static Game getInstance()
{
	if(_instance == null)
	{
		_instance = new Game();
	}
	return _instance;
}
public Board getBoard()
{
	return board;
} } ```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/patricknyu/CtCInterview/blob/master/ch_8/8_8/Piece.java&quot;&gt;Piece.java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;java
public class Piece
{
	private Color color;
	public Piece(Color c)
	{
		color = c;
	}
	//Flip the color
	public void flip()
	{
		if(color == Color.White)
		{
			color = Color.Black;
		}
		else
		{
			color = Color.White;
		}
	}
	public Color getColor()
	{
		return color;
	}
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/patricknyu/CtCInterview/blob/master/ch_8/8_8/Piece.java&quot;&gt;Piece.java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;```java
public class Player
{
	private Color color;
	public Player(Color c)
	{
		color = c;
	}
	public int getScore()
	{
		return Game.getInstance().getBoard().getScoreForColor(color);
	}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public boolean movePiece(int row, int column)
{
	return Game.getInstance().getBoard().placeColor(row,column,color);
}

public Color getColor()
{
	return color;
} } ```
&lt;/code&gt;&lt;/pre&gt;


    &lt;p&gt;&lt;a href=&quot;/ctci/ch8/problem-8_8-ctci/&quot;&gt;Problem 8_8[CTCI]&lt;/a&gt; was originally published by Patrick Yu at &lt;a href=&quot;&quot;&gt;Patrick Yu&lt;/a&gt; on October 16, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Problem 8_7[CTCI]]]></title>
  <link rel="alternate" type="text/html" href="/ctci/ch8/problem-8_7-ctci/" />
  <id>/ctci/ch8/problem-8_7-ctci</id>
  <published>2015-10-16T15:54:22-07:00</published>
  <updated>2015-10-16T15:54:22-07:00</updated>
  <author>
    <name>Patrick Yu</name>
    <uri></uri>
    <email>patrickyuemail@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;&lt;a href=&quot;https://github.com/patricknyu/CtCInterview/tree/master/ch_8/8_7&quot;&gt;Github Source&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;8_7&lt;/h1&gt;

&lt;h3 id=&quot;q&quot;&gt;Q:&lt;/h3&gt;
&lt;p&gt;Explain how you would design a chat server.  In particular, provide details about the various background components, classes, and methods.  What would be the hardest problems to solve?&lt;/p&gt;

&lt;h3 id=&quot;a&quot;&gt;A:&lt;/h3&gt;
&lt;p&gt;Well this is a extremely difficult solution.  I’m going to change pace and implement it in python.  This will be fun.&lt;/p&gt;

&lt;p&gt;I will need a UserMaster class which controls all the core user actions.  Then I’ll have a User class which will have user actions.  I’ll also have a conversation, groupchat, privatechat, message, addRequest, UserStatus, UserStatusType, and RequestStatus.&lt;/p&gt;

&lt;p&gt;I decided to write this in python.  Poorly…I need go go back and fix this&lt;/p&gt;

&lt;p&gt;```python
class UserMaster:
	#look into this
	def &lt;em&gt;init&lt;/em&gt;(self):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def addUser(self,fromUser,s):
	self.toUser = usersByAccountName.get(toAccountName)
	req = AddRequest(fromUser,toUser,new Date())
	self.toUser.recivedAddRequest(req)
	self.fromUser.sentAddRequest(req)

def approveAddRequest(self,req):
	req.status = RequestStatus.Accepted
	self.from = req.getFromUser()
	self.to = req.getToUser()
	self.from.addContact(to)
	self.to.addContact(from)

def rejectAddRequest(self,req):
	req.status = RequestStatus.Rejected
	self.from = req.getFromUser()
	self.to = req.getToUser()
	self.from.removeAddRequest(req)
	self.to.removeAddRequest(req)

def userSignedOn(self,accountName):
	user = usersByAccountName.get(accountName)
	if (user is not None):
		#needs changing
		user.setStatus(UserStatus(UserStatusType.Available))
		self.onlineUsers.put(user.getId(),user)

def userSignedOff(self,accountName):
	user = usersByAccountName.get(accountName)
	if (user is not None):
		#same here
		user.setSTatus(new UserStatus(UserStatusType.Offline))
		self.onlineUsers.remove(user.getID())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;class User:
	#of course we still need to look into this
	def _init(self, id, accountName, fullName):
		self.accontName = accoutName
		self.fullName = fullName
		self.id = id&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def sendMessageToUser(self,toUser, content):
	chat = privateChats.get(toUser.getId())
	if (chat is None):
		chat = PrivateChat(this,toUser)
		privateChats.put(toUser.getId(),chat)
	message = Message(content,Date())
	return chat.addMessage(message)

def sendMessageToGroupChat(self, groupId,content):
	chat = groupChats.get(groupId)
	if (chat is not None):
		message = Message(content,Date())
		return chat.addMessage(message)
	return false

def setStatus(self,status):
	self.status = status

def getStatus(self):
	return self.status

def addContact(user):
	#If we already have this user
	if (contacts.containsKey(user.getId())):
		return False
	else:
		contacts.put(user.getId(),user)
		return True

def receivedAddRequest(self,req):
	senderId = req.getFromUser().getId()
	if( not self.receivedAddRequests.containsKey(senderId):
		self.receivedAddRequests.put(senderId,req)

def sentAddRequest(self,req):
	receiverId = req.getFromUser().getId()
	if( not self.sentAddRequest.containsKey(receiverId)):
		self.sentAddRequests.pu(receiverId,req)

def removeAddRequest(self,req):
	if(req.getToUser() == self):
		self.receivedAddRequests.remove(req)
	elif(req.getFromUser() == self):
		sentAddRequests.remove(req)

def requestAddUser(self,accountName):
	#look into this.
	self.UserMaster.getInstance().addUser(self,accountName)

def addConversation(self,conversation):
	#there is a problem here
	if(type(conversation) == PrivateChat):
		otherUser = conversation.getOtherParticipant(self)
		self.privateChats.put(otherUser.getId(),conversation)
	elif(type(converation) == GroupChat):
		self.groupChats.add(converation)

def getId(self):
	return self.id;

def getAccountName(self):
	return self.accountName

def getFullName(self):
	return self.fullName ```
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;&lt;a href=&quot;/ctci/ch8/problem-8_7-ctci/&quot;&gt;Problem 8_7[CTCI]&lt;/a&gt; was originally published by Patrick Yu at &lt;a href=&quot;&quot;&gt;Patrick Yu&lt;/a&gt; on October 16, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Problem 8_6[CTCI]]]></title>
  <link rel="alternate" type="text/html" href="/ctci/ch8/problem-8_6-ctci/" />
  <id>/ctci/ch8/problem-8_6-ctci</id>
  <published>2015-10-01T20:00:47-07:00</published>
  <updated>2015-10-01T20:00:47-07:00</updated>
  <author>
    <name>Patrick Yu</name>
    <uri></uri>
    <email>patrickyuemail@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;&lt;a href=&quot;https://github.com/patricknyu/CtCInterview/tree/master/ch_8/8_6&quot;&gt;Github Source&lt;/a&gt;
###Q:
Implement a jigsaw puzzle.  Design the data structures and explain an algorithm to solve the puzzle.  You can assume that you have a fitsWith method which, when passed two puzzle pieces, returns true if the two pieces belong together.&lt;/p&gt;

&lt;h3 id=&quot;a&quot;&gt;A:&lt;/h3&gt;
&lt;p&gt;This is a difficult problem.  My general idea was to use a boolean n dimensional array to represent the board.  My implementation was simplistic, so I will use theirs.&lt;/p&gt;

&lt;p&gt;They use the idea of absolute position along with relative position.  Absolute position refers to when we know exactly where our piece goes.  Relative positions is ues to know it is next to another piece.&lt;/p&gt;

&lt;p&gt;This is a really tough problem.  I’ll replicate most of the code.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/patricknyu/CtCInterview/blob/master/ch_8/8_6/Edge.java&quot;&gt;Edge.java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;```java
public class Edge
{
	public enum Type
	{
		inner, outer, flat
	}
	Piece parent;
	Type type;
	int index;
	Edge attached_to;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public boolean fitsWidth(Edge edge)
{
	return false;
} } ```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/patricknyu/CtCInterview/blob/master/ch_8/8_6/Piece.java&quot;&gt;Piece.java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;java
public class Piece
{
	Edge[] edges;
	public boolean isCorner()
	{
		return false;
	}
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/patricknyu/CtCInterview/blob/master/ch_8/8_6/Puzzle.java&quot;&gt;Puzzle.java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;```java
public class Puzzle
{
	Piece[] pieces;
	Piece[][] solutions;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//The three types of pieces.
Edge[] inners, outers, flats;
Piece[] corners;

//Start with the edges
public void sort()
{
	for each Piece p in pieces
	{
		if (//p has two flat edges)
		{
			//add p to corners
		}
		for each edge in p.edges
		{
			if (//edge is an inner edge)
			{
				//add to inners
			}
			if (//edge is an outer edge)
			{
				//add to outers
			}
		}
}

//We want to start with a corner.  Then we find an open edge on the corner and try to match it with an open piece.  Once finding the match, we attach the edge, remove the edge from our list of edges and find the next open edge.

//The next open edge refers to the one that is directly opposite our current edge, given that is available.  If it is not available, then the next edge can be any edge.  This makes a spiral.
public void solve()
{
	Edge currentEdge = getExposedEdge(corner[0]);

	while (currentEdge != null)
	{
		//Get opposites
		Edge[] oppoisites = currentEdge.type == inner? outers : inners;
		//Loop through opposites
		for each Edge fittingEdge in opposites
		{
			//If the opposite fits
			if (currentEdge.fitsWith(fittingEdge))
			{
				attachEdges(currentEdge, fittingEdge);
				removeFromList(currentEdge);
				removeFromList(fittingEdge);
				currentEdge = nextExposedEdge(fittingEdge);
				break;
			}
		}
	}
}
public void removeFromList(Edge edge)
{
	//We don&#39;t deal with flats
	if(edge.type == flat)
	{
		return;
	}
	//Chooses which list to remove from
	Edge array[] = (currentEdge.type == inner) ? inners : outers;
	array.remove(edge);
}

//This will get the opposite edge if it is expose, if not it will just get the next exposed one.
public Edge nextExposedEdge(Edge edge)
{
	int edge_idx = (edge.index + 2)%4;
	Edge next_edge = edge.parent.edges[edge_idx];
	if(isExposed(next_edge))
	{
		return next_edge;
	}
	return getExposedEdge(edge.parent);
}

public void attechEdges(Edge e1, Edge e2)
{
	e1.attached_to(e2);
	e2.attached_to(e1);
}


//An exposed edge occurs when we don&#39;t have a flat edge and it is attached to nothing.
public boolean isExposed(Edge edge)
{
	return (edge.type != flat) &amp;amp;&amp;amp; (edge.attached_to == null);
}

public Edge getExposedEdge(Piece p)
{
	//loop to find next exposed edge
	for each Edge edge in p.edges
	{
		if(isExposed(edge))
		{
			retun edge;
		}
	}
	return null;
} } ```
&lt;/code&gt;&lt;/pre&gt;


    &lt;p&gt;&lt;a href=&quot;/ctci/ch8/problem-8_6-ctci/&quot;&gt;Problem 8_6[CTCI]&lt;/a&gt; was originally published by Patrick Yu at &lt;a href=&quot;&quot;&gt;Patrick Yu&lt;/a&gt; on October 01, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Kid Cudi - Cudderisback]]></title>
  <link rel="alternate" type="text/html" href="/music/kid-cudi-cudderisback/" />
  <id>/music/kid-cudi-cudderisback</id>
  <published>2015-09-30T16:13:00-07:00</published>
  <updated>2015-09-30T16:13:00-07:00</updated>
  <author>
    <name>Patrick Yu</name>
    <uri></uri>
    <email>patrickyuemail@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Because who doesn’t love Cudi and the Vampire Weeekend sample.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/qDXBpUtiX1E&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

    &lt;p&gt;&lt;a href=&quot;/music/kid-cudi-cudderisback/&quot;&gt;Kid Cudi - Cudderisback&lt;/a&gt; was originally published by Patrick Yu at &lt;a href=&quot;&quot;&gt;Patrick Yu&lt;/a&gt; on September 30, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Problem 8_5[CTCI]]]></title>
  <link rel="alternate" type="text/html" href="/ctci/ch8/problem-8_5-ctci/" />
  <id>/ctci/ch8/problem-8_5-ctci</id>
  <published>2015-09-29T15:58:43-07:00</published>
  <updated>2015-09-29T15:58:43-07:00</updated>
  <author>
    <name>Patrick Yu</name>
    <uri></uri>
    <email>patrickyuemail@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;&lt;a href=&quot;https://github.com/patricknyu/CtCInterview/tree/master/ch_8/8_5&quot;&gt;Github Source&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;q&quot;&gt;Q:&lt;/h3&gt;
&lt;p&gt;Design the data structures for an online book system.&lt;/p&gt;

&lt;h3 id=&quot;a&quot;&gt;A:&lt;/h3&gt;
&lt;p&gt;This is a pretty vague description of a book system.  With all other OOD questions, we must ensure we ask enough questions to properly understand what we are asked to accomplish.&lt;/p&gt;

&lt;p&gt;I’m going to assume this is a reader system which similar to a kindle, but is on a computer.&lt;/p&gt;

&lt;p&gt;I’m going to create a Book, Kindle, and Library class.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/patricknyu/CtCInterview/blob/master/ch_8/8_5/Book.java&quot;&gt;Book.java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;```java
public class Book
{
	private int id;
	private String Author;
	private String Title;
	private String text;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public Book(int i, String a, String ti, String te)
{
	id = i;
	Author = a;
	Title = ti;
	text = te;
}

public int getID()
{
	return id;
}
public void setID(int i)
{
	id = i;
}
public String getAuthor()
{
	return Author;
}
public void setAuthor(String a)
{
	Author = a;
}
public String getTitle()
{
	return Title;
}
public void setTitle(String ti)
{
	Title = ti;
}
public String getText()
{
	return text;
}
public void setText(String te)
{
	text = te;
} } ```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/patricknyu/CtCInterview/blob/master/ch_8/8_5/Library.java&quot;&gt;Library.java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;```java
import java.util.Hashtable;&lt;/p&gt;

&lt;p&gt;public class Library
{
	//Where we hold the books, book id will be the integer
	private Hashtable&amp;lt;Integer, Book&amp;gt; lib;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//Adding books to our library
public void addBook(Book b)
{
	if(lib.containsKey(b.getID()))
	{
		System.out.println(&quot;We already have this book&quot;);
	}
	else
	{
		lib.put(b.getID(),b);
	}
}

//Getting rid of books from our library
public void removeBook(Book b)
{
	if(lib.containsKey(b.getID()))
	{
		lib.remove(b.getID());
	}
	else
	{
		System.out.println(&quot;We don&#39;t have this book.&quot;);
	}
}

//Grabbing books from our library.
public Book get(Book b)
{
	if(!lib.containsKey(b.getID()))
	{
		System.out.println(&quot;We don&#39;t have this book.&quot;);
	}
	else
	{
		return lib.get(b.getID());
	}
	return null;
}
public boolean containsBook(Book b)
{
	return lib.containsKey(b.getID());
} } ```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/patricknyu/CtCInterview/blob/master/ch_8/8_5/Kindle.java&quot;&gt;Kindle.java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;```java
public class Kindle
{
	private int storage;
	private Library lib;
	private String username;
	private Book currentBook;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public Kindle(String u, int s, Library l)
{
	storage = s;
	username = u;
	lib = l;
}

public int getStorageSize()
{
	return storage;
}

public String getUser()
{
	return username;
}

public Book getCurrentBook()
{
	return currentBook;
}
public void readBook(Book b)
{
	if(currentBook != null)
	{
		System.out.println(&quot;You&#39;re already reading something else!  Finish that first!&quot;);
	}

	if (!lib.containsBook(b))
	{
		System.out.println(&quot;We don&#39;t have this book to read&quot;);
	}

	currentBook = b;
}

//There is probably a better way to implement this part.
public void stopReading()
{
	currentBook = null;
} } ```
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;&lt;a href=&quot;/ctci/ch8/problem-8_5-ctci/&quot;&gt;Problem 8_5[CTCI]&lt;/a&gt; was originally published by Patrick Yu at &lt;a href=&quot;&quot;&gt;Patrick Yu&lt;/a&gt; on September 29, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Problem 8_4[CTCI]]]></title>
  <link rel="alternate" type="text/html" href="/ctci/ch8/problem-8_4-ctci/" />
  <id>/ctci/ch8/problem-8_4-ctci</id>
  <published>2015-09-29T11:39:07-07:00</published>
  <updated>2015-09-29T11:39:07-07:00</updated>
  <author>
    <name>Patrick Yu</name>
    <uri></uri>
    <email>patrickyuemail@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;&lt;a href=&quot;https://github.com/patricknyu/CtCInterview/tree/master/ch_8/8_4&quot;&gt;Github Source&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;q&quot;&gt;Q:&lt;/h3&gt;
&lt;p&gt;Design a parking lot using object-oriented principles&lt;/p&gt;

&lt;h3 id=&quot;a&quot;&gt;A:&lt;/h3&gt;
&lt;p&gt;I’m going to think of this as a parking structure with many levels.&lt;/p&gt;

&lt;p&gt;I’ll represent it as a 2d array.  I need a class for the structure, a class for cars, and a class for spaces.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/patricknyu/CtCInterview/blob/master/ch_8/8_4/Car.java&quot;&gt;Car.java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;```java
public class Car
{
	private String make;
	private String model;
	private int year;
	public boolean parked;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public Car(String ma,String mo, int y, boolean p)
{
	make = ma;
	model = mo;
	year = y;
	parked = p;
}

public int getYear()
{
	return year;
}
public String getMake()
{
	return make;
}
public String getModel()
{
	return model;
}
public void message()
{
	System.out.println(&quot;This is a &quot; + make + model + &quot; from &quot; + year);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
```&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/patricknyu/CtCInterview/blob/master/ch_8/8_4/Spot.java&quot;&gt;Spot.java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;```java
public class Spot
{
	public boolean hasCar;
	public Car currentCar;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public Spot(Car c, boolean in)
{
	currentCar = c;
	hasCar = in;
}

public Car getCar()
{
	return currentCar;
} } ```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/patricknyu/CtCInterview/blob/master/ch_8/8_4/ParkingStructure.java&quot;&gt;ParkingStructure.java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;```java
public class ParkingStructure
{
	public int levels;
	public int spotsPerLevel;
	public Car[][] struct;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public ParkingStructure(int l, int spl)
{
	struct = new Car[l][spl];
}
//returns false if car is there	
public boolean insertCar(Car c, int level, int spot)
{
	if(struct[level][spot] == null)
	{
		struct[level][spot] = c;
		c.message();
		return true;
	}
	else
	{
		return false;
	}
} } ```
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;&lt;a href=&quot;/ctci/ch8/problem-8_4-ctci/&quot;&gt;Problem 8_4[CTCI]&lt;/a&gt; was originally published by Patrick Yu at &lt;a href=&quot;&quot;&gt;Patrick Yu&lt;/a&gt; on September 29, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Problem 8_3[CTCI]]]></title>
  <link rel="alternate" type="text/html" href="/ctci/ch8/problem-8_3-ctci/" />
  <id>/ctci/ch8/problem-8_3-ctci</id>
  <published>2015-09-28T12:43:14-07:00</published>
  <updated>2015-09-28T12:43:14-07:00</updated>
  <author>
    <name>Patrick Yu</name>
    <uri></uri>
    <email>patrickyuemail@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;&lt;a href=&quot;https://github.com/patricknyu/CtCInterview/tree/master/ch_8/8_3&quot;&gt;Github Source&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;q&quot;&gt;Q:&lt;/h3&gt;
&lt;p&gt;Design a musical jukebox using object-oriented principles.&lt;/p&gt;

&lt;h3 id=&quot;a&quot;&gt;A:&lt;/h3&gt;
&lt;p&gt;My initial thoughts are to make JukeBox and Song classes.&lt;/p&gt;

&lt;p&gt;The JukeBox class would be the main class, which will have a array which holds all the songs.  Then there would be a play method which took in a string which described the song we wanted to play from the array, played it, and would consequently assign to a next song.  We would need a displayCurrentSong method as well.  We would need an AddToPlaylist method as well to add to a ArrayList of songs.&lt;/p&gt;

&lt;p&gt;The Song class would have a song name, artist, year, and song length.  It would also have a play method where it would play the song.&lt;/p&gt;

&lt;p&gt;I’ll put in a rough outline.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/patricknyu/CtCInterview/blob/master/ch_8/8_3/JukeBox.java&quot;&gt;Jukebox.java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;```java
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;&lt;/p&gt;

&lt;p&gt;public class JukeBox
{
	//We assume that songs are built in and cannot be changed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private Song[] songs;  /*Songs go here*/
public List&amp;lt;Song&amp;gt; playlist = new ArrayList&amp;lt;Song&amp;gt;();

//Adds to list if it is not in songs.  This might have been better used as a hashset.
public boolean AddToPlaylist(Song s)
{
	if (!Arrays.asList(songs).contains(s))
	{
		return false;
	}
	else
	{
		playlist.add(s);
	}
	return true;
}
//Plays a certain # of songs
public void play(int i)
{
	//If there aren&#39;t enough songs in the playlist
	if (i &amp;gt;playlist.size())
	{
		System.out.println(&quot;TOO LONG&quot;);
	}
	while (i &amp;gt; 0)
	{
		playlist.get(0).play();
		playlist.remove(0);
	}
} } ```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/patricknyu/CtCInterview/blob/master/ch_8/8_3/Song.java&quot;&gt;Song.java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;```java
public class Song
{
	private int year;
	private String artist;
	private String lyrics;
	private int length;
	private String name;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public Song(String n, String a, String lyr, int len, int y)
{
	name = n;
	artist = a;
	lyrics = lyr;
	length = len;
	year = y;
}

public void play()
{
	System.out.println(&quot;Now Playing &quot; + name + &quot; by &quot; + artist + &quot; from &quot; + year + &quot;.&quot;);
	System.out.println(lyrics);
} } ```
&lt;/code&gt;&lt;/pre&gt;


    &lt;p&gt;&lt;a href=&quot;/ctci/ch8/problem-8_3-ctci/&quot;&gt;Problem 8_3[CTCI]&lt;/a&gt; was originally published by Patrick Yu at &lt;a href=&quot;&quot;&gt;Patrick Yu&lt;/a&gt; on September 28, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Problem 8_1[CTCI]]]></title>
  <link rel="alternate" type="text/html" href="/ctci/ch8/problem-8_1-ctci/" />
  <id>/ctci/ch8/problem-8_1-ctci</id>
  <published>2015-09-27T15:45:40-07:00</published>
  <updated>2015-09-27T15:45:40-07:00</updated>
  <author>
    <name>Patrick Yu</name>
    <uri></uri>
    <email>patrickyuemail@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;&lt;a href=&quot;https://github.com/patricknyu/CtCInterview/tree/master/ch_8/8_1&quot;&gt;Github Source&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;q&quot;&gt;Q:&lt;/h2&gt;
&lt;p&gt;Design the data structures for a generic deck of cards.  Explain how you would subclass the data structures to implement blackjack.&lt;/p&gt;

&lt;h2 id=&quot;a&quot;&gt;A:&lt;/h2&gt;
&lt;p&gt;Technically, generic could be any deck of cards, but let’s assume the interviewer specifies the deck as a deck of playing cards.&lt;/p&gt;

&lt;p&gt;Assuming no jokers, I would design it using a class for Cards which take in properties such as number and suit.  I would also have a class for the entire deck which contained a stack of 52 cards which ensured we had no duplicate cards somehow.&lt;/p&gt;

&lt;p&gt;The books solution, cleverly, uses a enum for the Card class and a ArrayList to represent the cards in the Deck along with a generic class.  They also have a shuffle method.&lt;/p&gt;

&lt;p&gt;I’m not going to recreate all the code since my code would mimic the solution nearly identically.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/ctci/ch8/problem-8_1-ctci/&quot;&gt;Problem 8_1[CTCI]&lt;/a&gt; was originally published by Patrick Yu at &lt;a href=&quot;&quot;&gt;Patrick Yu&lt;/a&gt; on September 27, 2015.&lt;/p&gt;
  </content>
</entry>

</feed>
